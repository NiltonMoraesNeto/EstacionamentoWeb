@model ZTC.Model.Mensalista

@{
    ViewBag.Title = "Edit";
}
<style>
    #tableUsuario tr td {
        padding: 5px 5px 5px 5px;
    }

    .error {
        color: #a94442;
    }

    .tablespc tr td {
        padding-right: 10px;
        padding-bottom: 5px;
        padding-top: 5px;
    }

    span.font {
        font-size: 24px;
        font-weight: 300;
        color: #333;
    }
</style>

<script src="~/Content/jquery.searchabledropdown-1.0.8.src.js"></script>
<script type="text/javascript">

    function limpa_formulário_cep() {
        //Limpa valores do formulário de cep.
        document.getElementById('Rua').value = ("");
        document.getElementById('Bairro').value = ("");
        document.getElementById('Cidade').value = ("");
        document.getElementById('Estado').value = ("");
        //document.getElementById('ibge').value = ("");
    }

    function meu_callback(conteudo) {
        if (!("erro" in conteudo)) {
            //Atualiza os campos com os valores.
            document.getElementById('Rua').value = (conteudo.logradouro);
            document.getElementById('Bairro').value = (conteudo.bairro);
            document.getElementById('Cidade').value = (conteudo.localidade);
            document.getElementById('Estado').value = (conteudo.uf);
            //document.getElementById('ibge').value = (conteudo.ibge);
        } //end if.
        else {
            //CEP não Encontrado.
            limpa_formulário_cep();
            alert("CEP não encontrado.");
        }
    }

    function pesquisacep(valor) {

        //Nova variável "cep" somente com dígitos.
        var cep = valor.replace(/\D/g, '');

        //Verifica se campo cep possui valor informado.
        if (cep != "") {

            //Expressão regular para validar o CEP.
            var validacep = /^[0-9]{8}$/;

            //Valida o formato do CEP.
            if (validacep.test(cep)) {

                //Preenche os campos com "..." enquanto consulta webservice.
                document.getElementById('Rua').value = "...";
                document.getElementById('Bairro').value = "...";
                document.getElementById('Cidade').value = "...";
                document.getElementById('Estado').value = "...";
                //document.getElementById('ibge').value = "...";

                //Cria um elemento javascript.
                var script = document.createElement('script');

                //Sincroniza com o callback.
                script.src = '//viacep.com.br/ws/' + cep + '/json/?callback=meu_callback';

                //Insere script no documento e carrega o conteúdo.
                document.body.appendChild(script);

            } //end if.
            else {
                //cep é inválido.
                limpa_formulário_cep();
                alert("Formato de CEP inválido.");
            }
        } //end if.
        else {
            //cep sem valor, limpa formulário.
            limpa_formulário_cep();
        }
    };

</script>




<h2>Editar Mensalista</h2>

<div class="content">

@using (Html.BeginForm("Edit", "Mensalista", FormMethod.Post, htmlAttributes: new { @id = "mensalista" }))
{
    @Html.AntiForgeryToken()
    
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.IdMensalista)   
    @Html.HiddenFor(model => model.Persisted)
    
    <table class="CadPro">
        <tr>
            <td>Nome Mensalista</td>
            <td>
                @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "input-pdr", @style = "width:500px" } })
                @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
            </td>
        </tr>
        <tr>
            <td>CPF</td>
            <td>
                @Html.EditorFor(model => model.CPF, new { htmlAttributes = new { @class = "input-pdr cpf", @style = "width:240px" } })
                @Html.ValidationMessageFor(model => model.CPF, "", new { @class = "text-danger" })
            </td>
            <td width="92px">Data de Nascimento</td>
            <td>
                @Html.EditorFor(model => model.DataNascimento, new { htmlAttributes = new { @class = "input-pdr datetimepicker", @style = "width:240px", @maxlength = "10" } })
                @Html.ValidationMessageFor(model => model.DataNascimento, "", new { @class = "text-danger" })
            </td>
        </tr>
        <tr>
            <td>Telefone Fixo</td>
            <td>
                @Html.EditorFor(model => model.TelefoneFixo, new { htmlAttributes = new { @class = "input-pdr telefone", @style = "width:240px" } })
                @Html.ValidationMessageFor(model => model.TelefoneFixo, "", new { @class = "text-danger" })
            </td>
            <td width="92px">Celular</td>
            <td>
                @Html.EditorFor(model => model.TelefoneCelular, new { htmlAttributes = new { @class = "input-pdr telefone", @style = "width:240px" } })
                @Html.ValidationMessageFor(model => model.TelefoneCelular, "", new { @class = "text-danger" })
            </td>
        </tr>
        <tr>
            <td>CEP</td>
            <td>
                @Html.EditorFor(model => model.CEP, new { htmlAttributes = new { @class = "input-pdr", @style = "width:240px", @maxlength = "8", @onblur = "pesquisacep(this.value);" } })
                @Html.ValidationMessageFor(model => model.CEP, "", new { @class = "text-danger" })
            </td>
        </tr>


        <tr>
            <td>Rua</td>
            <td>
                @Html.EditorFor(model => model.Rua, new { htmlAttributes = new { @class = "input-pdr", @style = "width:240px" } })
                @Html.ValidationMessageFor(model => model.Rua, "", new { @class = "text-danger" })
            </td>
            <td width="92px">Bairro</td>
            <td>
                @Html.EditorFor(model => model.Bairro, new { htmlAttributes = new { @class = "input-pdr", @style = "width:240px" } })
                @Html.ValidationMessageFor(model => model.Bairro, "", new { @class = "text-danger" })
            </td>
        </tr>

        <tr>
            <td>Cidade</td>
            <td>
                @Html.EditorFor(model => model.Cidade, new { htmlAttributes = new { @class = "input-pdr", @style = "width:240px" } })
                @Html.ValidationMessageFor(model => model.Cidade, "", new { @class = "text-danger" })
            </td>
            <td width="92px">Estado</td>
            <td>
                @Html.EditorFor(model => model.Estado, new { htmlAttributes = new { @class = "input-pdr", @style = "width:240px" } })
                @Html.ValidationMessageFor(model => model.Estado, "", new { @class = "text-danger" })
            </td>
        </tr>

        <tr>
            <td>Complemento</td>
            <td>
                @Html.EditorFor(model => model.Complemento, new { htmlAttributes = new { @class = "input-pdr", @style = "width:240px" } })
                @Html.ValidationMessageFor(model => model.Complemento, "", new { @class = "text-danger" })
            </td>
        </tr>

        <tr>
            <td>Dados do Carro</td>

        </tr>
        <tr>
            <td>Marca</td>
            <td>
                @Html.EditorFor(model => model.Marca, new { htmlAttributes = new { @class = "input-pdr", @style = "width:240px" } })
                @Html.ValidationMessageFor(model => model.Marca, "", new { @class = "text-danger" })
            </td>
            <td width="92px">Carro</td>
            <td>
                @Html.EditorFor(model => model.Carro, new { htmlAttributes = new { @class = "input-pdr", @style = "width:240px" } })
                @Html.ValidationMessageFor(model => model.Carro, "", new { @class = "text-danger" })
            </td>
        </tr>
        <tr>
            <td>Placa</td>
            <td>
                @Html.EditorFor(model => model.Placa, new { htmlAttributes = new { @class = "input-pdr", @style = "width:240px" } })
                @Html.ValidationMessageFor(model => model.Placa, "", new { @class = "text-danger" })
            </td>
            <td width="92px">Cor</td>
            <td>
                @Html.EditorFor(model => model.Cor, new { htmlAttributes = new { @class = "input-pdr", @style = "width:240px" } })
                @Html.ValidationMessageFor(model => model.Cor, "", new { @class = "text-danger" })
            </td>
        </tr>

        <tr>
            <td>R$</td>

        </tr>
        <tr>
            <td>Valor Mensal</td>
            <td>
                @Html.EditorFor(model => model.ValorMensal, new { htmlAttributes = new { @class = "input-pdr moeda", @style = "width:240px" } })
                @Html.ValidationMessageFor(model => model.ValorMensal, "", new { @class = "text-danger" })
            </td>
            <td width="92px">Período</td>
            <td>
                @Html.EditorFor(model => model.Periodo, new { htmlAttributes = new { @class = "input-pdr hora", @style = "width:240px" } })
                @Html.ValidationMessageFor(model => model.Periodo, "", new { @class = "text-danger" })
            </td>
        </tr>

        <tr>
            <td>Vencimento</td>
            <td>
                @Html.EditorFor(model => model.Vencimento, new { htmlAttributes = new { @class = "input-pdr", @style = "width:240px", @maxlength = "2" } })
                @Html.ValidationMessageFor(model => model.Vencimento, "", new { @class = "text-danger" })
            </td>
        </tr>
        <tr>
            <td colspan="3">
                <input type="submit" value="Salvar" class="btn btnGreen" style="width: 85px; height: 34px; margin-left: 160px" />
                <a href='@Url.Action("/", "Mensalista")'>
                    <input type="button" class="btn btnWhite dropdown-toggle" style="width: 85px; height: 34px;" value="Cancelar" />
                </a>
            </td>
            
        </tr>
    </table>
}


</div>
<script>

    $(function ($) {
        $("#Placa").mask("aaa-9999");


    });

</script>